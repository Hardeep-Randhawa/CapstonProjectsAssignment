# -*- coding: utf-8 -*-
"""TF-IDF_algorithm_and_implement_smallcorpus _data_which_has_3sentences.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QotTlK-g2xtYUG7-wcCqu6dysKMz7bio
"""

import math
from collections import Counter

def compute_tf(sentence):
  words=sentence.lower().split()
  total_word=len(words)
  tf=Counter(words)
  for word in tf:
    tf[word]/=total_word
  return tf

def compute_idf(courps):
  N=len(courps)
  idf={}
  all_words=set(word for sentence in courps for word in sentence.lower().split())
  for word in all_words:
    n=sum(1 for sentence in courps if word in sentence.lower().split())
    idf[word]=math.log(N/ (1+n))+1
  return idf

def compute_tfidf(courps):
  idf=compute_idf(courps)
  tfidf_courps=[]
  for sentence in courps:
    tf=compute_tf(sentence)
    tfidf={word:tf[word]*idf[word] for word in tf}
    tfidf_courps.append(tfidf)
  return tfidf_courps

corpus = [
        "This is the first document.",
        "This document is the second document.",
        "And this is the third one."
    ]

corpus1 = [
        "the cat set on the mat",
        "the dog set on the log",
        "cats and dogs are friends"
    ]

result=compute_tfidf(corpus1)
#print result

for i,vec in enumerate(result):
  print(f"Sentence {i+1} TF-IDF:")
  for word,score in sorted(vec.items()):
    print(f"{word}:{score:.4f}")
  print()